{"version":3,"sources":["components/SearchBox.js","features/locations/locationsSlice.js","components/Markers.js","components/Map.js","App.js","reportWebVitals.js","app/store.js","index.js"],"names":["standaloneSearchBox","locationsSlice","createSlice","name","initialState","reducers","addLocation","state","action","push","payload","actions","SearchBox","dispatch","useDispatch","onLoad","ssb","onPlacesChanged","getPlaces","geometry","location","type","placeholder","className","Markers","locations","useSelector","map","position","JSON","stringify","containerStyle","width","height","libraries","center","lat","lng","Map","googleMapsApiKey","process","mapContainerStyle","zoom","options","disableDefaultUI","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","locationsReducer","config","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"kMAMIA,E,6DCJSC,EAAiBC,YAAY,CACxCC,KAAM,YACNC,aAAc,GACdC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAME,KAAKD,EAAOE,aAKTJ,EAAgBL,EAAeU,QAA/BL,YAEAL,IAAf,Q,eDmBeW,MAzBf,WACE,IAAMC,EAAWC,cACjB,OACE,cAAC,IAAD,CACEC,OAAQ,SAAAC,GAAG,OAAIhB,EAAsBgB,GACrCC,gBAAiB,WACfJ,EACEP,EACEN,EACCkB,YAAY,GACZC,SACAC,YART,SAaE,uBACEC,KAAK,OACLC,YAAY,mBACZC,UAAU,iBENHC,MAjBf,WACE,IAAMC,EAAYC,aAAY,SAAAnB,GAAK,OAAIA,EAAMkB,aAC7C,OACE,mCAEIA,EAAUE,KAAI,SAAAP,GAAQ,OACpB,cAAC,IAAD,CAEIL,OAAQ,aACRa,SAAUR,GAFLS,KAAKC,UAAUV,UCN5BW,EAAiB,CACrBC,MAAO,OACPC,OAAQ,QAGJC,EAAY,CAAC,UAEfC,EAAS,CACXC,IAAK,EACLC,IAAK,GAwBQC,MArBf,WACE,OACE,cAAC,IAAD,CACEC,iBAAkBC,0CAClBN,UAAWA,EAFb,SAIE,eAAC,IAAD,CACEO,kBAAmBV,EACnBI,OAAQA,EACRO,KAAM,EACNC,QAAS,CACLC,kBAAkB,GALxB,UAQE,cAAC,EAAD,IACA,cAAC,EAAD,UCzBOC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCJCQ,cAAe,CAC5BC,QAAS,CACP/B,UAAWgC,KCIfC,mBAEAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.74961229.chunk.js","sourcesContent":["import React from 'react';\r\nimport { StandaloneSearchBox } from '@react-google-maps/api';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addLocation } from \"../features/locations/locationsSlice\";\r\nimport '../App.css';\r\n\r\nlet standaloneSearchBox;\r\n\r\nfunction SearchBox() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StandaloneSearchBox\r\n      onLoad={ssb => standaloneSearchBox = ssb}\r\n      onPlacesChanged={() => {\r\n        dispatch(\r\n          addLocation(\r\n            standaloneSearchBox\r\n            .getPlaces()[0]\r\n            .geometry\r\n            .location\r\n          )\r\n        );\r\n      }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search places...\"\r\n        className=\"searchbox\"\r\n      />\r\n    </StandaloneSearchBox>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const locationsSlice = createSlice({\r\n  name: 'locations',\r\n  initialState: [],\r\n  reducers: {\r\n    addLocation: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addLocation } = locationsSlice.actions;\r\n\r\nexport default locationsSlice.reducer;","import React from 'react';\r\nimport { Marker } from '@react-google-maps/api';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Markers() {\r\n  const locations = useSelector(state => state.locations);\r\n  return (\r\n    <>\r\n      {\r\n        locations.map(location => \r\n          <Marker\r\n              key={JSON.stringify(location)}\r\n              onLoad={()=>{}}\r\n              position={location}\r\n          />\r\n        )\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Markers;","import React from 'react';\r\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\r\nimport SearchBox from \"./SearchBox\";\r\nimport Markers from \"./Markers\";\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst libraries = [\"places\"];\r\n\r\nlet center = {\r\n  lat: 0,\r\n  lng: 0\r\n};\r\n\r\nfunction Map() {\r\n  return (\r\n    <LoadScript\r\n      googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\r\n      libraries={libraries}\r\n    >\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={center}\r\n        zoom={2}\r\n        options={{\r\n            disableDefaultUI: true\r\n        }}\r\n      >\r\n        <Markers />\r\n        <SearchBox />\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  )\r\n}\r\n\r\nexport default Map;","import React from 'react';\nimport Map from './components/Map';\n\nfunction App() {\n  return <Map />;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport locationsReducer from '../features/locations/locationsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    locations: locationsReducer\r\n  },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { config } from 'dotenv-flow';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nconfig();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}